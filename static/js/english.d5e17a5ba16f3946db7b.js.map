{"version":3,"sources":["webpack:///./src/pages/english/data/animal.js","webpack:///./src/pages/english/data/fruit.js","webpack:///src/pages/english/index.vue","webpack:///./src/pages/english/index.vue?b2d9","webpack:///./src/pages/english/index.vue","webpack:///./src/pages/english/router.js","webpack:///./src/pages/english/entry.js","webpack:///./node_modules/vue-touch/dist/vue-touch.js","webpack:///./node_modules/hammerjs/hammer.js"],"names":["animal","en","cn","fruit","english","name","data","group","list","curGroupIndex","curWorldIndex","showSelectGroup","created","localGroupIndex","Number","window","localStorage","getItem","localWorldIndex","this","length","curGroup","computed","curWord","backgroundStyle","backgroundImage","methods","loadMedia","audio","$refs","src","play","menu","closeMenu","selectGroup","index","storage","last","next","setItem","pages_english","render","_vm","_h","$createElement","_c","_self","staticClass","ref","_v","on","swipeleft","swiperight","style","click","attrs","_s","directives","rawName","value","expression","_l","item","key","$event","staticRenderFns","router","routes","path","component","__webpack_require__","normalizeComponent","ssrContext","Vue","use","VueTouch","createApp","pageRouter","app","onReady","$mount","Hammer","assign","target","sources","len","arguments","i","source","keys","Object","i$1","createProp","type","default","directions","config","customEvents","gestures","gestureMap","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeup","swipedown","tap","Component","props","options","tapOptions","panOptions","pinchOptions","pressOptions","rotateOptions","swipeOptions","tag","String","enabled","Boolean","mounted","$isServer","hammer","Manager","$el","recognizers","setupBuiltinRecognizers","setupCustomRecognizers","updateEnabled","destroyed","destroy","watch","deep","handler","args","apply","gesture","_events","mainGesture","addRecognizer","addEvent","gestures$$1","str","recognizer","charAt","toUpperCase","slice","dir","direction","hammerDirection","indexOf","hasOwnProperty","guardDirections","add","recognizeWith","this$1","e","$emit","newVal","oldVal","enableAll","disableAll","event","enable","disable","r","set","toggle","toggleAll","isEnabled","h","$slots","installed","vueTouch","install","opts","bind","registerCustomEvent","module","exports","factory","__WEBPACK_AMD_DEFINE_RESULT__","document","exportName","undefined","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","call","deprecate","method","message","deprecationMessage","Error","stack","replace","log","console","warn","TypeError","output","nextKey","extend","dest","merge","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","ifUndefined","val1","val2","addEventListeners","types","splitStr","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","find","trim","split","inArray","findByKey","toArray","uniqueArray","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","inputTarget","domHandler","ev","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p1","p2","sqrt","atan2","PI","evEl","evTarget","evWin","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","compute","actions","update","touchAction","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","preset","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","stop","force","stopped","curRecognizer","existing","remove","events","off","gestureEvent","createEvent","initEvent","dispatchEvent","triggerDomEvent","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press"],"mappings":"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","file":"static/js/english.d5e17a5ba16f3946db7b.js","sourcesContent":["export default [\n  {en: 'cat', cn: '猫'},\n  {en: 'dog', cn: '狗'},\n  {en: 'rabbit', cn: '兔子'},\n  {en: 'sheep', cn: '羊'},\n  {en: 'horse', cn: '马'},\n  {en: 'pig', cn: '猪'},\n  {en: 'mouse', cn: '老鼠'},\n  {en: 'duck', cn: '鸭子'},\n  {en: 'chicken', cn: '鸡'},\n  {en: 'cock', cn: '公鸡'},\n  {en: 'hen', cn: '母鸡'},\n  {en: 'cattle', cn: '牛'},\n  {en: 'bull', cn: '公牛'},\n  {en: 'cow', cn: '奶牛'},\n  {en: 'tiger', cn: '老虎'},\n  {en: 'lion', cn: '狮子'},\n  {en: 'leopard', cn: '豹'},\n  {en: 'wolf', cn: '狼'},\n  {en: 'fox', cn: '狐狸'},\n  {en: 'monkey', cn: '猴子'},\n  {en: 'elephant', cn: '大象'},\n  {en: 'panda', cn: '熊猫'},\n  {en: 'giraffe', cn: '长颈鹿'},\n  {en: 'deer', cn: '鹿'},\n  {en: 'camel', cn: '骆驼'},\n  {en: 'bear', cn: '熊'},\n  {en: 'peacock', cn: '孔雀'}\n]\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/english/data/animal.js","export default [\n  {en: 'apple', cn: '苹果'},\n  {en: 'banana', cn: '香蕉'}\n]\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/english/data/fruit.js","<template>\n  <div class=\"english\">\n    <audio ref=\"audio\"></audio>\n    <VTouch\n      @swipeleft=\"next\"\n      @swiperight=\"last\">\n      <div class=\"bg\" :style=\"backgroundStyle\" @click=\"loadMedia\"></div>\n    </VTouch>\n    <div class=\"menu\">\n      <div class=\"menu-wrapper\" @click=\"menu\"><icon name=\"menu\" class=\"menu-icon\"></icon></div>\n    </div>\n    <div class=\"bar\">\n      <div class=\"text\">{{curWord.en}}</div>\n      <div class=\"options\">\n        <i class=\"last\" @click=\"last\"><icon name=\"left\" class=\"option-icon\"></icon></i>\n        <i class=\"next\" @click=\"next\"><icon name=\"left\" class=\"option-icon\"></icon></i>\n      </div>\n    </div>\n    <div class=\"group-select\" v-show=\"showSelectGroup\">\n      <div class=\"close-bar\"><i class=\"close\" @click=\"closeMenu\"><icon name=\"close\"></icon></i></div>\n      <div class=\"content\">\n        <ul>\n          <li class=\"group-item\"\n              v-for=\"(item, index) in group\"\n              :key=\"index\"\n              @click=\"selectGroup(index)\">\n            <span class=\"title\">{{item.cn}}</span>\n            <span class=\"icon\"><icon :name=\"item.en\" class=\"group-icon\"></icon></span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport animal from './data/animal'\nimport fruit from './data/fruit'\nexport default {\n  name: 'Index',\n  data () {\n    return {\n      group: [\n        {en: 'animal', cn: '动物', list: animal},\n        {en: 'fruit', cn: '水果', list: fruit}\n      ],\n      curGroupIndex: 0,\n      curWorldIndex: 0,\n      showSelectGroup: false\n    }\n  },\n  created () {\n    let localGroupIndex = Number(window.localStorage.getItem('curGroupIndex') || 0)\n    let localWorldIndex = Number(window.localStorage.getItem('curWorldIndex') || 0)\n    this.curGroupIndex = localGroupIndex >= this.group.length ? 0 : localGroupIndex\n    this.curWorldIndex = localWorldIndex >= this.curGroup.list.length ? 0 : localWorldIndex\n  },\n  computed: {\n    curGroup () {\n      return this.group[this.curGroupIndex]\n    },\n    curWord () {\n      return this.curGroup.list[this.curWorldIndex]\n    },\n    backgroundStyle () {\n      return {\n        backgroundImage: `url('./static/en/img/${this.curGroup.en}/${this.curWord.en}.png')`\n      }\n    }\n  },\n  methods: {\n    loadMedia () {\n      let audio = this.$refs.audio\n      audio.src = `./static/en/media/${this.curGroup.en}/${this.curWord.en}.mp3`\n      audio.play()\n    },\n    menu () {\n      this.showSelectGroup = true\n    },\n    closeMenu () {\n      this.showSelectGroup = false\n    },\n    selectGroup (index) {\n      this.showSelectGroup = false\n      this.curGroupIndex = index\n      this.curWorldIndex = 0\n      this.storage()\n    },\n    last () {\n      if (this.curWorldIndex > 0) {\n        this.curWorldIndex = this.curWorldIndex - 1\n      } else {\n        if (this.curGroupIndex > 0) {\n          this.curGroupIndex = this.curGroupIndex - 1\n        } else {\n          this.curGroupIndex = this.group.length - 1\n        }\n        this.curWorldIndex = this.curGroup.list.length - 1\n      }\n      this.storage()\n    },\n    next () {\n      if (this.curWorldIndex < (this.curGroup.list.length - 1)) {\n        this.curWorldIndex = this.curWorldIndex + 1\n      } else {\n        if (this.curGroupIndex < (this.group.length - 1)) {\n          this.curGroupIndex = this.curGroupIndex + 1\n        } else {\n          this.curGroupIndex = 0\n        }\n        this.curWorldIndex = 0\n      }\n      this.storage()\n    },\n    storage () {\n      window.localStorage.setItem('curGroupIndex', this.curGroupIndex)\n      window.localStorage.setItem('curWorldIndex', this.curWorldIndex)\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n@import '@/assets/style/variables.scss';\n\n.english{\n  position: relative;\n  margin: 0 auto;\n  max-width: 640px;\n  min-height: 100%;\n  .bg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: #E5E5E5;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n  }\n  .menu{\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 20px;\n    .menu-wrapper{\n      width: 40px;\n      height: 40px;\n      line-height: 40px;\n      text-align: center;\n      background-color: rgba(0, 0, 0, .5);\n      border-radius: 50%;\n    }\n    .menu-icon{\n      color: #fff;\n      font-size: 20px;\n      vertical-align: middle;\n      margin-top: -3px;\n    }\n  }\n  .bar{\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 12%;\n    background-color: rgba(0, 0, 0, .5);\n    .text{\n      position: absolute;\n      top: 50%;\n      width: 100%;\n      font-size: 28px;\n      font-weight: bold;\n      text-align: center;\n      color: #FFF;\n      transform: translate(0, -50%);\n    }\n    .options{\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      .last, .next{\n        padding: 20px;\n      }\n      .next{\n        transform: rotateZ(180deg);\n      }\n      .option-icon{\n        color: #fff;\n        font-size: 30px;\n      }\n    }\n  }\n  .group-select{\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    display: flex;\n    flex-direction: column;\n    background-color: #E5E5E5;\n    .close-bar{\n      display: flex;\n      align-items: center;\n      height: 50px;\n      .close{\n        padding: 16px;\n      }\n    }\n    .content{\n      flex: auto;\n      overflow-y: auto;\n      .group-item{\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 0 20px;\n        height: 50px;\n        background-color: #fff;\n        margin-bottom: 1px;\n        font-size: 16px;\n      }\n    }\n  }\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/pages/english/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"english\"},[_c('audio',{ref:\"audio\"}),_vm._v(\" \"),_c('VTouch',{on:{\"swipeleft\":_vm.next,\"swiperight\":_vm.last}},[_c('div',{staticClass:\"bg\",style:(_vm.backgroundStyle),on:{\"click\":_vm.loadMedia}})]),_vm._v(\" \"),_c('div',{staticClass:\"menu\"},[_c('div',{staticClass:\"menu-wrapper\",on:{\"click\":_vm.menu}},[_c('icon',{staticClass:\"menu-icon\",attrs:{\"name\":\"menu\"}})],1)]),_vm._v(\" \"),_c('div',{staticClass:\"bar\"},[_c('div',{staticClass:\"text\"},[_vm._v(_vm._s(_vm.curWord.en))]),_vm._v(\" \"),_c('div',{staticClass:\"options\"},[_c('i',{staticClass:\"last\",on:{\"click\":_vm.last}},[_c('icon',{staticClass:\"option-icon\",attrs:{\"name\":\"left\"}})],1),_vm._v(\" \"),_c('i',{staticClass:\"next\",on:{\"click\":_vm.next}},[_c('icon',{staticClass:\"option-icon\",attrs:{\"name\":\"left\"}})],1)])]),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showSelectGroup),expression:\"showSelectGroup\"}],staticClass:\"group-select\"},[_c('div',{staticClass:\"close-bar\"},[_c('i',{staticClass:\"close\",on:{\"click\":_vm.closeMenu}},[_c('icon',{attrs:{\"name\":\"close\"}})],1)]),_vm._v(\" \"),_c('div',{staticClass:\"content\"},[_c('ul',_vm._l((_vm.group),function(item,index){return _c('li',{key:index,staticClass:\"group-item\",on:{\"click\":function($event){_vm.selectGroup(index)}}},[_c('span',{staticClass:\"title\"},[_vm._v(_vm._s(item.cn))]),_vm._v(\" \"),_c('span',{staticClass:\"icon\"},[_c('icon',{staticClass:\"group-icon\",attrs:{\"name\":item.en}})],1)])}))])])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6e02b460\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./build/loaders/theme-loader.js??ref--3-1!./src/pages/english/index.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6e02b460\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!postcss-loader?{\\\"sourceMap\\\":true}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!../../../build/loaders/theme-loader.js??ref--3-1!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!../../../build/loaders/theme-loader.js??ref--3-1!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!../../../build/loaders/theme-loader.js??ref--3-1!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6e02b460\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!../../../build/loaders/theme-loader.js??ref--3-1!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6e02b460\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/english/index.vue\n// module id = null\n// module chunks = ","/**\n * @file index router\n * @author linliu21\n */\nimport Index from './index.vue'\n\nexport default {\n  routes: [\n    {\n      path: '/',\n      name: 'index',\n      component: Index\n    }\n  ]\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/english/router.js","import {createApp} from '@/app'\nimport pageRouter from './router'\nimport Vue from 'vue'\nimport VueTouch from 'vue-touch'\n\nVue.use(VueTouch, {name: 'VTouch'})\n\nconst {app, router} = createApp('index', pageRouter)\n\nrouter.onReady(() => app.$mount('#app'))\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/english/entry.js","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('hammerjs')) :\n  typeof define === 'function' && define.amd ? define(['hammerjs'], factory) :\n  (factory(global.Hammer));\n}(this, (function (Hammer) { 'use strict';\n\nHammer = 'default' in Hammer ? Hammer['default'] : Hammer;\n\nfunction assign(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n  for (var i = 0; i < sources.length; i++) {\n    var source = sources[i];\n    var keys = Object.keys(source);\n    for (var i$1 = 0; i$1 < keys.length; i$1++) {\n      var key = keys[i$1];\n      target[key] = source[key];\n    }\n  }\n  return target\n}\nfunction createProp() {\n  return {\n    type: Object,\n    default: function() { return {} }\n  }\n}\nfunction capitalize (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\nvar directions = ['up', 'down', 'left', 'right', 'horizontal', 'vertical', 'all'];\nfunction guardDirections (options) {\n  var dir = options.direction;\n  if (typeof dir === 'string') {\n    var hammerDirection = 'DIRECTION_' + dir.toUpperCase();\n    if (directions.indexOf(dir) > -1 && Hammer.hasOwnProperty(hammerDirection)) {\n      options.direction = Hammer[hammerDirection];\n    } else {\n      console.warn('[vue-touch] invalid direction: ' + dir);\n    }\n  }\n  return options\n}\nvar config = {\n};\nvar customEvents = {\n};\nvar gestures = [\n  'pan','panstart','panmove','panend','pancancel','panleft','panright','panup','pandown',\n  'pinch','pinchstart','pinchmove','pinchend','pinchcancel','pinchin','pinchout',\n  'press','pressup',\n  'rotate','rotatestart','rotatemove','rotateend','rotatecancel',\n  'swipe','swipeleft','swiperight','swipeup','swipedown',\n  'tap'\n];\nvar gestureMap = {\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  pinch: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  press: 'press',\n  pressup: 'press',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe',\n  tap: 'tap'\n};\n\nvar Component = {\n  props: {\n    options: createProp(),\n    tapOptions: createProp(),\n    panOptions: createProp(),\n    pinchOptions: createProp(),\n    pressOptions: createProp(),\n    rotateOptions: createProp(),\n    swipeOptions: createProp(),\n    tag: { type: String, default: 'div' },\n    enabled: {\n      default: true,\n      type: [Boolean, Object],\n    }\n  },\n  mounted: function mounted() {\n    if (!this.$isServer) {\n      this.hammer = new Hammer.Manager(this.$el, this.options);\n      this.recognizers = {};\n      this.setupBuiltinRecognizers();\n      this.setupCustomRecognizers();\n      this.updateEnabled(this.enabled);\n    }\n  },\n  destroyed: function destroyed() {\n    if (!this.$isServer) {\n      this.hammer.destroy();\n    }\n  },\n  watch: {\n    enabled: {\n      deep: true,\n      handler: function handler() {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        (ref = this).updateEnabled.apply(ref, args);\n        var ref;\n      }\n    }\n  },\n  methods: {\n    setupBuiltinRecognizers: function setupBuiltinRecognizers()  {\n      var this$1 = this;\n      for (var i = 0; i < gestures.length; i++) {\n        var gesture = gestures[i];\n        if (this$1._events[gesture]) {\n          var mainGesture = gestureMap[gesture];\n          var options = assign({}, (config[mainGesture] || {}), this$1[(mainGesture + \"Options\")]);\n          this$1.addRecognizer(mainGesture, options);\n          this$1.addEvent(gesture);\n        }\n      }\n    },\n    setupCustomRecognizers: function setupCustomRecognizers() {\n      var this$1 = this;\n      var gestures$$1 = Object.keys(customEvents);\n      for (var i = 0; i < gestures$$1.length; i++) {\n        var gesture = gestures$$1[i];\n        if (this$1._events[gesture]) {\n          var opts = customEvents[gesture];\n          var localCustomOpts = this$1[(gesture + \"Options\")] || {};\n          var options = assign({}, opts, localCustomOpts);\n          this$1.addRecognizer(gesture, options, {mainGesture: options.type});\n          this$1.addEvent(gesture);\n        }\n      }\n    },\n    addRecognizer: function addRecognizer(gesture, options, ref) {\n      if ( ref === void 0 ) ref = {};\n      var mainGesture = ref.mainGesture;\n      if (!this.recognizers[gesture]) {\n        var recognizer = new Hammer[capitalize(mainGesture || gesture)](guardDirections(options));\n        this.recognizers[gesture] = recognizer;\n        this.hammer.add(recognizer);\n        recognizer.recognizeWith(this.hammer.recognizers);\n      }\n    },\n    addEvent: function addEvent(gesture) {\n      var this$1 = this;\n      this.hammer.on(gesture, function (e) { return this$1.$emit(gesture, e); });\n    },\n    updateEnabled: function updateEnabled(newVal, oldVal) {\n      var this$1 = this;\n      if (newVal === true) {\n        this.enableAll();\n      } else if (newVal === false) {\n        this.disableAll();\n      } else if (typeof newVal === 'object') {\n        var keys = Object.keys(newVal);\n        for (var i = 0; i < keys.length; i++) {\n          var event = keys[i];\n          if (this$1.recognizers[event]) {\n            newVal[event]\n              ? this$1.enable(event)\n              : this$1.disable(event);\n          }\n        }\n      }\n    },\n    enable: function enable(r) {\n      var recognizer = this.recognizers[r];\n      if (!recognizer.options.enable) {\n        recognizer.set({ enable: true });\n      }\n    },\n    disable: function disable(r) {\n      var recognizer = this.recognizers[r];\n      if (recognizer.options.enable) {\n        recognizer.set({ enable: false });\n      }\n    },\n    toggle: function toggle(r) {\n      var recognizer = this.recognizers[r];\n      if (recognizer) {\n        recognizer.options.enable\n          ? this.disable(r)\n          : this.enable(r);\n      }\n    },\n    enableAll: function enableAll(r) {\n      this.toggleAll({ enable: true });\n    },\n    disableAll: function disableAll(r) {\n      this.toggleAll({ enable: false });\n    },\n    toggleAll: function toggleAll(ref) {\n      var this$1 = this;\n      var enable = ref.enable;\n      var keys = Object.keys(this.recognizers);\n      for (var i = 0; i < keys.length; i++) {\n        var r = this$1.recognizers[keys[i]];\n        if (r.options.enable !== enable) {\n          r.set({ enable: enable });\n        }\n      }\n    },\n    isEnabled: function isEnabled(r) {\n      return this.recognizers[r] && this.recognizers[r].options.enable\n    }\n  },\n  render: function render(h) {\n    return h(this.tag, {}, this.$slots.default)\n  }\n};\n\nvar installed = false;\nvar vueTouch = { config: config, customEvents: customEvents };\nvueTouch.install = function install(Vue, opts) {\n  if ( opts === void 0 ) opts = {};\n  var name = opts.name || 'v-touch';\n  Vue.component(name, assign(Component, { name: name }));\n  installed = true;\n}.bind(vueTouch);\nvueTouch.registerCustomEvent = function registerCustomEvent(event, options) {\n  if ( options === void 0 ) options = {};\n  if (installed) {\n    console.warn((\"\\n      [vue-touch]: Custom Event '\" + event + \"' couldn't be added to vue-touch.\\n      Custom Events have to be registered before installing the plugin.\\n      \"));\n    return\n  }\n  options.event = event;\n  customEvents[event] = options;\n  Component.props[(event + \"Options\")] = {\n    type: Object,\n    default: function default$1() { return {} }\n  };\n}.bind(vueTouch);\nvueTouch.component = Component;\nif (typeof exports == \"object\") {\n  module.exports = vueTouch;\n} else if (typeof define == \"function\" && define.amd) {\n  define([], function(){ return vueTouch });\n} else if (typeof window !== 'undefined' && window.Vue) {\n  window.VueTouch = vueTouch;\n  Vue.use(vueTouch);\n}\n\n})));\n//# sourceMappingURL=vue-touch.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-touch/dist/vue-touch.js\n// module id = I0MY\n// module chunks = 2","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/hammerjs/hammer.js\n// module id = rxKx\n// module chunks = 2"],"sourceRoot":""}